import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import CartServices from "../../../services/CartServices";
import { Table, Button, InputNumber, message, Typography, Row, Col } from "antd";
import { useNavigate } from "react-router-dom";

const { Title, Text } = Typography;

const CartPage = () => {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(false);
  const { user } = useSelector((state) => state.auth);
  const accountId = user?.accountId;

  const fetchCart = async () => {
    if (!accountId) return;
    try {
      setLoading(true);
      const response = await CartServices.getCart({ accountId });
      if (response.success) {
        setCart(response.data);
      }
    } catch (error) {
      message.error("L·ªói khi l·∫•y gi·ªè h√†ng");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCart();
  }, [accountId]);

  const handleUpdateQuantity = async (productId, quantity) => {
    try {
      const response = await CartServices.updateCart({ accountId, productId, quantity });
      if (response.success) {
        // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng v·ªõi d·ªØ li·ªáu m·ªõi t·ª´ server
        setCart((prevCart) => ({
          ...prevCart,
          items: prevCart.items.map((item) =>
            item.productId._id === productId ? { ...item, quantity } : item
          ),
        }));
        message.success("C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng");
      }
    } catch (error) {
      message.error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng");
    }
  };

  const handleRemoveItem = async (productId) => {
    try {
      const response = await CartServices.removeFromCart({ accountId, productId });
      if (response.success) {
        setCart((prevCart) => ({
          ...prevCart,
          items: prevCart.items.filter((item) => item.productId._id !== productId),
        }));
        message.success("X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng");
      }
    } catch (error) {
      message.error("L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng");
    }
  };

  const navigate = useNavigate(); // Th√™m useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng

  const handleCheckout = async () => {
    if (!cart || cart.items.length === 0) {
      message.error("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng, kh√¥ng th·ªÉ thanh to√°n!");
      return;
    }
  
    try {
      // Ki·ªÉm tra h√†ng t·ªìn kho tr∆∞·ªõc khi thanh to√°n
      const outOfStockItems = cart.items.filter((item) => item.quantity > item.productId.stock);
      if (outOfStockItems.length > 0) {
        message.error("M·ªôt s·ªë s·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng, vui l√≤ng ki·ªÉm tra l·∫°i!");
        return;
      }
  
      message.success("Thanh to√°n th√†nh c√¥ng! üéâ");
  
      await CartServices.clearCart({ accountId });
  
      setCart(null);
  
      setTimeout(() => {
        navigate("/san-pham");
      }, 1000);
    } catch (error) {
      message.error("L·ªói khi l√†m tr·ªëng gi·ªè h√†ng sau khi thanh to√°n");
    }
  };
  
  
  
  
  
  const calculateTotal = () => {
    if (!cart || !cart.items) return 0;
    return cart.items.reduce((total, item) => total + item.quantity * item.price, 0);
  };

  const columns = [
    {
      title: "S·∫£n ph·∫©m",
      dataIndex: "productId",
      key: "product",
      render: (productId) => productId.name, // Gi·∫£ s·ª≠ productId c√≥ tr∆∞·ªùng name
    },
    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "quantity",
      key: "quantity",
      render: (quantity, record) => (
        <InputNumber
          min={1}
          value={quantity}
          onChange={(value) => handleUpdateQuantity(record.productId._id, value)}
        />
      ),
    },
    {
      title: "Gi√°",
      dataIndex: "price",
      key: "price",
      render: (price) => `${price} VND`,
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Button danger onClick={() => handleRemoveItem(record.productId._id)}>
          X√≥a
        </Button>
      ),
    },
  ];

  return (
    <div>
      <Title level={2}>Gi·ªè h√†ng c·ªßa b·∫°n</Title>
      {cart && cart.items && cart.items.length > 0 ? (
        <>
          <Table
            columns={columns}
            dataSource={cart.items}
            rowKey={(record) => record.productId._id}
          />
          <Row justify="end" style={{ marginTop: 24 }}>
            <Col>
              <Text strong>T·ªïng ti·ªÅn: {calculateTotal()} VND</Text>
            </Col>
          </Row>
          <Row justify="end" style={{ marginTop: 16 }}>
            <Col>
              <Button type="primary" onClick={handleCheckout}>
                Thanh To√°n
              </Button>
            </Col>
          </Row>
        </>
      ) : (
        <Text>Gi·ªè h√†ng tr·ªëng</Text>
      )}
    </div>
  );
};

export default CartPage;