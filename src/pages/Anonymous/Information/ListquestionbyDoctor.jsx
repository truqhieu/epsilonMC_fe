// eslint-disable-next-line no-unused-vars
import React, { useEffect, useState } from "react";
import { Card, Spin, Modal } from "antd";
import { MessageOutlined } from "@ant-design/icons";
import QuestionServices from "../../../services/QuestionServices";
import PropTypes from "prop-types";
import { ListQuestionByDoctorStyled } from "./styles";

const ListQuestionByDoctor = ({ doctorId }) => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [comments, setComments] = useState([]);
  const [loadingComments, setLoadingComments] = useState(false);

  // Fetch danh s√°ch c√¢u h·ªèi b√°c sƒ© ƒë√£ tr·∫£ l·ªùi
  useEffect(() => {
    if (doctorId) {
      fetchDoctorAnsweredQuestions();
    }
  }, [doctorId]);

  const fetchDoctorAnsweredQuestions = async () => {
    setLoading(true);
    try {
      const response = await QuestionServices.getDoctorAnsweredQuestions(doctorId);
      if (response?.data) {
        const questionsWithComments = await Promise.all(
          response.data.map(async (q) => {
            const commentResponse = await QuestionServices.getCommentsByQuestionId(q._id);
            const totalComments = commentResponse?.data?.length || 0;
            return { ...q, commentCount: totalComments };
          })
        );
        setQuestions(questionsWithComments);
      } else {
        setQuestions([]);
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi b√°c sƒ© ƒë√£ t∆∞ v·∫•n:", error);
      setQuestions([]);
    } finally {
      setLoading(false);
    }
  };

  // Fetch b√¨nh lu·∫≠n khi m·ªü modal
  const fetchComments = async (questionId) => {
    setLoadingComments(true);
    try {
      console.log(`üì• ƒêang l·∫•y b√¨nh lu·∫≠n cho c√¢u h·ªèi ID: ${questionId}`);
      const response = await QuestionServices.getCommentsByQuestionId(questionId);

      if (response?.data) {
        console.log("‚úÖ API response for comments:", response.data);

        // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu b√¨nh lu·∫≠n
        if (!Array.isArray(response.data)) {
          console.warn("‚ö†Ô∏è D·ªØ li·ªáu b√¨nh lu·∫≠n kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, c·∫ßn ki·ªÉm tra l·∫°i API");
          setComments([]);
          return;
        }

        // S·∫Øp x·∫øp b√¨nh lu·∫≠n theo th·ªùi gian
        const sortedComments = response.data.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        setComments(sortedComments);
      } else {
        setComments([]);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y b√¨nh lu·∫≠n c·ªßa c√¢u h·ªèi:", error);
      setComments([]);
    } finally {
      setLoadingComments(false);
    }
  };

  // M·ªü modal v√† t·∫£i b√¨nh lu·∫≠n
  const openModal = (question) => {
    setSelectedQuestion(question);
    fetchComments(question._id);
    setIsModalOpen(true);
  };

  // ƒê√≥ng modal
  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedQuestion(null);
    setComments([]); // Reset b√¨nh lu·∫≠n khi ƒë√≥ng
  };

  return (
    <ListQuestionByDoctorStyled>
      <div className="list-question-container">
        <h2 className="question-list-title">C√¢u h·ªèi b√°c sƒ© ƒë√£ t∆∞ v·∫•n</h2>
  
        {loading ? (
          <Spin size="large" style={{ display: "block", margin: "auto" }} />
        ) : questions.length === 0 ? (
          <p className="no-question-text">B√°c sƒ© ch∆∞a c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c t∆∞ v·∫•n.</p>
        ) : (
          <div className="question-list">
            {questions.map((q) => (
              <Card key={q._id} className="question-card">
                <p className="question-meta">
                  <strong>{q.gender}, {q.age} tu·ªïi</strong>
                </p>
                <h4 className="question-title">{q.title}</h4>
                <p className="question-content">{q.content}</p>
                <p className="question-date">üìÖ {new Date(q.createdAt).toLocaleDateString()}</p>
                <div className="question-footer">
                  <span className="question-reply" onClick={() => openModal(q)}>
                    <MessageOutlined className="reply-icon" /> {q.commentCount} B√¨nh lu·∫≠n
                  </span>
                </div>
              </Card>
            ))}
          </div>
        )}
  
        {/* Modal hi·ªÉn th·ªã chi ti·∫øt c√¢u h·ªèi */}
        <Modal title="Chi ti·∫øt c√¢u h·ªèi" open={isModalOpen} onCancel={closeModal} footer={null}>
          {selectedQuestion ? (
            <div className="modal-content">
              <p className="modal-question-meta">
                <strong>{selectedQuestion.gender}, {selectedQuestion.age} tu·ªïi</strong>
              </p>
              <h4 className="modal-question-title">{selectedQuestion.title}</h4>
              <p className="modal-question-content">{selectedQuestion.content}</p>
              <p className="modal-question-date">üìÖ Ng√†y h·ªèi: {new Date(selectedQuestion.createdAt).toLocaleDateString()}</p>
  
              {/* Hi·ªÉn th·ªã b√¨nh lu·∫≠n */}
              <div className="comments-section">
                <h4>B√¨nh lu·∫≠n</h4>
                {loadingComments ? (
                  <Spin />
                ) : comments.length === 0 ? (
                  <p>Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o.</p>
                ) : (
                  comments.map((c, index) => (
                    <div key={index} className="comment-item">
                      <p className="doctor-name">
                        {c.doctorId?.name
                          ? `B√°c sƒ© ${c.doctorId.name}`
                          : c.patientId?.name
                          ? `B·ªánh nh√¢n ${c.patientId.name}`
                          : "Ng∆∞·ªùi d√πng"}
                      </p>
                      <p className="comment-content">{c.content}</p>
                      <p className="comment-time">‚è≥ {new Date(c.createdAt).toLocaleString()}</p>
                    </div>
                  ))
                )}
              </div>
            </div>
          ) : (
            <p className="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu.</p>
          )}
        </Modal>
      </div>
    </ListQuestionByDoctorStyled>
  );
  
};

ListQuestionByDoctor.propTypes = {
  doctorId: PropTypes.string.isRequired,
};

export default ListQuestionByDoctor;
